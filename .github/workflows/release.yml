name: Release with Semantic Versioning

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.new_tag }}
    
    steps:
      # Checkout with full history for conventional commits
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NOONY_NPM_TOKEN }}
          fetch-depth: 0

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@noony-serverless'

      # Cache dependencies
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm ci

    #   # Run quality checks
    #   - name: Run tests
    #     run: npm test

    #   - name: Run test coverage
    #     run: npm run test:coverage

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      # Build the project
      - name: Build project
        run: |
          # Clean previous build
          rm -rf build/
          # Run build
          npm run build
          echo "📦 Build completed"

      # Verify build output
      - name: Verify build output
        run: |
          echo "🔍 Checking build output..."
          echo "Build directory contents:"
          ls -la build/ || echo "Build directory not found"
          
          echo "Expected files check:"
          if [ -f "build/index.js" ]; then
            echo "✅ build/index.js exists"
          else
            echo "❌ build/index.js missing"
          fi
          
          if [ -f "build/index.d.ts" ]; then
            echo "✅ build/index.d.ts exists"
          else
            echo "❌ build/index.d.ts missing"
          fi
          
          if [ ! -f "build/index.js" ] || [ ! -f "build/index.d.ts" ]; then
            echo "❌ Build output missing!"
            echo "Available files in build directory:"
            find build/ -type f 2>/dev/null || echo "No files found"
            exit 1
          fi
          echo "✅ Build verification passed"

      # Configure Git
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Determine version bump type
      - name: Determine version bump
        id: version_bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-determine based on commit messages
            if git log --format=%B -n 20 | grep -q "BREAKING CHANGE\|!:"; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif git log --format=%B -n 20 | grep -q "feat:"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      # Get current version and bump
      - name: Version handling
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Bump version
          VERSION_TYPE="${{ steps.version_bump.outputs.type }}"
          npm version $VERSION_TYPE --no-git-tag-version
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION (type: $VERSION_TYPE)"

      # Publish to GitHub Packages
      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NOONY_NPM_TOKEN: ${{ secrets.NOONY_NPM_TOKEN }}

      # Create and push git tag
      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin ${{ steps.version.outputs.new_tag }}

      # Commit version bump (after successful publish)
      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]

          Published to GitHub Packages
          - Package: @noony-serverless/core@${{ steps.version.outputs.new_version }}
          - Build: ${{ github.run_number }}
          - Commit: ${{ github.sha }}"
          
          git push origin ${{ github.ref_name }}

      # Generate changelog
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to file
          echo "## Changes in ${{ steps.version.outputs.new_version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$COMMITS" >> CHANGELOG.md
          
          # Set output (escape newlines)
          {
            echo "content<<EOF"
            cat CHANGELOG.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

  # Create GitHub Release
  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NOONY_NPM_TOKEN }}
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          release_name: Release ${{ needs.release.outputs.tag }}
          body: |
            ## 🚀 Release ${{ needs.release.outputs.version }}
            
            ### 📦 Package Information
            - **Package**: `@noony-serverless/core`
            - **Version**: `${{ needs.release.outputs.version }}`
            - **Registry**: GitHub Packages
            - **Build**: #${{ github.run_number }}
            
            ### 📥 Installation
            ```bash
            npm install @noony-serverless/core@${{ needs.release.outputs.version }}
            ```
            
            ### 🔧 Usage
            ```typescript
            import { Handler } from '@noony-serverless/core';
            ```
            
            ### 📋 Changes
            See commit history for detailed changes in this release.
            
            ### 🔗 Links
            - [Package on GitHub](https://github.com/noony-serverless/noony-core/packages)
            - [Documentation](https://github.com/noony-serverless/noony-core#readme)
            - [Issues](https://github.com/noony-serverless/noony-core/issues)
          draft: false
          prerelease: ${{ contains(needs.release.outputs.version, '-') }}

  # Notify on failure
  notify-failure:
    needs: [release, create-release]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "❌ Release workflow failed!"
          echo "Check the workflow logs for details."
          exit 1
